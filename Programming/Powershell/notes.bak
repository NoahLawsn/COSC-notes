Powershell Day1:
---------------------
Exercise 1:
ACTIVITY: Find Cmdlets
    1. Ensure that you have the latest copy of help by updating your help system.
       - get-update
    2. Which cmdlets deal with the viewing/manipulating of processes?
	- get-process
	-get-help process
	-get-command -noun process
    3. Display a list of services installed on your local computer.
	- Get-Service
    4. What cmdlets are used to write or output objects or text to the screen?
       - get-help *write*
       - Write-Output
    5. What cmdlets can be used to create, modify, list, and delete variables?
       - Set-Variable
       - get-command -noun vartiable
    6. What cmdlet can be used, other than Get-Help, to find and list other cmdlets?
       - Get-Command
    7. Find the cmdlet that is used to prompt the user for input.
       - read-host


---------------------
Exercise 2:
ACTIVITY: Running Cmdlets
    1. Display a list of running processes.
	- get-process
    2. Display a list of all running processes that start with the letter "s".
	- get-process -name s*
    3. Find the cmdlet and its purpose for the following aliases:
       - gal <alias>
        a. gal
        b. dir
        c. echo
        d. ?
        e. %
        f. ft
    4. Display a list of Windows Firewall Rules.
       - get-netfirewall
    5. Create a new alias called "gh" for the cmdlet "Get-Help"
       - set-alias gh get-help
       Lecture Notes:
       -------------------
Linux		-	var → $var
PowerShell	-	$var → $var
PS uses spaces as delimiters
get-childitem env:	-	gets all environmental variables
---------------------
Exercise 3:
ACTIVITY: Variables
    1. Create a variable called "var1" that holds a random number between 25-50.
       - $var1 = Get-Random -Minimum 25 -Maximum 51
    2. Create a variable called "var2" that holds a random number between 1-10.
       - $var2 = Get-Random -Minimum 1 -Maximum 11
    3. Create a variable called "sum" that holds the sum of var1 and var2.
       - $sum = $var1 + $var2
    4. Create a variable called "sub" that holds the difference of var1 and var2.
       - $sub = $var1 - $var2
    5. Create a variable called "prod" that holds the product of var1 and var2.
       - $prod = $var1 * $var2
    6. Create a variable called "quo" that holds the quotient of var1 and var2.
       - $quo = $var1 / $var2
    7. Replace the variables in text with their values in the following format:
        a. "var1" + "var2" = "sum"
           - [string]$string = "$var1 + $var2 = $sum"
    8. Replace the variables in text with their values in the following format:
        a. "var1" - "var2" = "sub"
           - [string]$string = "$var1 - $var2 = $sub"
    9. Replace the variables in text with their values in the following format:
        a. "var1" * "var2" = "prod"
           - [string]$string = "$var1 * $var2 = $prod"
    10. Replace the variables in text with their values in the following format:
        a. "var1" / "var2" = "quo"
           - [string]$string = "$var1 / $var2 = $quo"
       ---------------------
       Exercise 4:
ACTIVITY: Reverse Arrays
    • Create an array containing a range with a random starting and stopping point. The starting point will be a random number from -10 through 0. The ending point will be a random number from 1 through 20.

For example, if the first random number is -3, and the second random number is 2, your array will be -3, -2, -1, 0, 1, 2 
    • Create a variable that contains the contents of the array in reverse

Using the above example, your reversed array will be 2, 1, 0, -1, -2, -3

$start = Get-Random -Minimum -10 -Maximum 1
$stop = Get-Random -Minimum 1 -Maximum 21
$array = $start..$stop
[array]::Reverse($array)
$array



       
       ---------------------
Exercise 5:
ACTIVITY: Arrays & Hash Tables
Create two empty hash tables with the following names:
    1. employee1
    2. employee2
Using the following table of key-value pairs, apply each key-value to the empty hash tables.
Table 1. keys and values
First
Last
ID
Job
Mary
Hopper
001
Software Developer
John
Williams
002
Web Developer

The keys on the first row of the table while the values are on the first column of the table
Now add a new key called Username which holds a contraction of the employee’s first initial then last name then ID. (i.e. mhopper001).
Mary got promoted to "Software Lead" so the job key for Mary needs to be changed to "Software Lead"
Create a new hash table called "employee3" that contains the following values with the respective keys.
Table 2. employee3
First
Last
ID
Job
Alex
Moran
003
Software Developer
Add a new key called "Status" that holds the values:
Table 3. Status
Mary
John
Alex
Management
Intermediate
Entry Level

Make sure you use both dot notation and square brackets to manipulate your hash tables.

$employee1 = @{"First" = "Mary"; "Last" = "Hopper"; "ID" = 001; "Job" = "Software Developer"}
$employee2 = @{"First" = "John"; "Last" = "Williams"; "ID" = 002; "Job" = "Web Developer"}
$employee1["Username"] = "mhopper001"
$employee2["Username"] = "jwilliams002"
$employee1["Job"] = "Software Lead"
$employee3 = @{"First" = "Alex"; "Last" = "Moran"; "ID" = 003; "Job" = "Software Developer"}
$employee3["Username"] = "amoran003"
$employee1.Status = "Management"
$employee2.Status = "Intermediate"
$employee3.Status = "Entry Level"
       ---------------------
       Exercise 6:
       The Pipeline Activity
    1. Display the start time of the earliest and latest running processes
       - Get-Process | select name, starttime | select -first 1 -last 1
    2. Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
       - Get-Date -Format "dddd"
    3. Identify a cmdlet that displays a list of installed hotfixes.
       - Get-hotfix
    4. Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
       - Get-HotFix | select InstalledOn
    5. Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.
       - Get-HotFix | select hotfixid, description, InstalledOn | Sort-Object -Property description
Day 2 notes:
----------------
* Write-output places data into output while write-host ONLY sends it to STDOUT
Get-command (sees commands able to run)
* script locking makes variables dynamic and refer to current variable values
	>>> $a = {$C + $c}
	>>> & $a
* ‘1’, ‘2’, ‘3’ | sort-object -property { [Int]$_ } # $_ is the pipes input
